variables:
  # Keeping this low helps jobs find an available runner without waiting.
  # @see https://git.drupalcode.org/project/gitlab_templates/-/blob/main/includes/include.drupalci.main.yml?ref_type=heads
  KUBERNETES_CPU_REQUEST: 2
  COMPOSER_NO_INTERACTION: 1
  _WEB_ROOT: web

default:
  # New pushes can stop the current job and start a new one.
  interruptible: true
  image:
    name: 'drupalci/php-8.3-apache:production'
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - stuck_or_timeout_failure
      - runner_system_failure
      - scheduler_failure

build project:
  stage: build
  variables:
    COMPOSER_MIRROR_PATH_REPOS: 1
  script:
    # Add the components as globally available path repositories, simulating Packagist.
    - find $CI_PROJECT_DIR -type d -maxdepth 1 -name 'drupal_cms*' -exec composer config --global repositories.{} path {} ';'
    # Add the project template as a globally available path repository, simulating Packagist.
    - composer config --global repositories.template path $CI_PROJECT_DIR/project_template
    # Create the project.
    - composer create-project drupal/drupal-cms-project project --stability=dev
  artifacts:
    paths:
      - project

run tests:
  stage: test
  needs:
    - build project
  variables:
    _PROJECT_ROOT: $CI_PROJECT_DIR/project
  script:
    - service apache2 start
    - cd /var/www/html
    - ln -s -f $_PROJECT_ROOT/$_WEB_ROOT
    - cd $_WEB_ROOT
    - chown -R www-data:www-data .
    - sudo SYMFONY_DEPRECATIONS_HELPER=disabled SIMPLETEST_DB=sqlite://localhost/db.sqlite SIMPLETEST_BASE_URL=http://localhost/$_WEB_ROOT -u www-data $_PROJECT_ROOT/vendor/bin/phpunit --configuration core --testdox recipes

trial:
  stage: deploy
  needs:
    - build project
    - run tests
  script:
    - cd project
    - cp -R -v $CI_PROJECT_DIR/trial_assets/* .
    # Apply the necessary patches for Drupal to work in a WebAssembly runtime.
    - composer patches-relock
    - composer patches-repatch
    # Minimize the size of the artifact by uninstalling dev dependencies and deleting
    # stuff we'll never need for the trial.
    - composer install --no-dev
    - find . -depth -type d -name tests -exec rm -r -f "{}" ';'
    # Install Drupal CMS.
    - vendor/bin/drush site:install --yes
    # Use a test mail collector, since the trial won't have access to sendmail.
    - vendor/bin/drush config:set --yes system.mail interface.default test_mail_collector
    # Serve the installed project via the built-in PHP server to confirm that an HTTP
    # request is successful. The server's command-line output is silenced just to make
    # the job log more readable.
    - php -S 127.0.0.1:8080 -t $_WEB_ROOT 2>/dev/null &
    - sleep 3
    - curl --fail --location --silent -o /dev/null http://127.0.0.1:8080
    # Clear the cache, so that the request we just did won't have any effect (i.e.,
    # cache detritus) on the artifact.
    - vendor/bin/drush cache:rebuild
    # Create the trial archive.
    - composer archive --dir=$CI_PROJECT_DIR --file=trial --format=zip
  artifacts:
    paths:
      - trial.zip
    expire_in: 30 days
    public: true
